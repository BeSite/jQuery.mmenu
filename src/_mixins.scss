// Arrow buttons
@mixin mm_btn_arrow_prev {
	transform: rotate( -45deg );
	left: $mm_listitemIndent + 3;
	right: auto;
}

@mixin mm_btn_arrow_next {
	transform: rotate( 135deg );
	right: $mm_listitemIndent + 3;
	left: auto;
}


//	Misc
@mixin mm_ellipsis() {
	text-overflow: ellipsis;
	white-space: nowrap;
	overflow: hidden;
}

@mixin mm_clearfix() {
	&:after {
		content: '';
		display: block;
		clear: both;
	}
}
@mixin mm_offcanvas_size(
    $cls: '.mm-menu_offcanvas',
    $width: $mm_menuWidth,
    $minWidth: $mm_menuMinWidth,
    $maxWidth: $mm_menuMaxWidth
) {
    #{$cls} {
        width: clamp($minWidth, percentage($width), $maxWidth);
    }

    .mm-wrapper--opening {
        #{$cls}.mm-menu--opened ~ .mm-slideout {
            transform: translate3d(
                clamp($minWidth, #{$width * 100}vw, $maxWidth),
                0,
                0
            );
        }
    }
}

@mixin mm_iconpanel_size($nr) {
    .mm-panel--iconpanel-#{$nr} {
        width: calc(100% - (var(--mm-iconpanel-size) * #{$nr}));
    }
}

@mixin mm_navbar_tabs_borders( $top, $bottom, $last, $first ) {
	.mm-navbars_#{$top} {
		.mm-navbar--tabs:not( :#{$last}-child ) {
			border-#{$bottom}-width: 1px;
			border-#{$bottom}-style: solid;
		}
		.mm-navbar__tab--selected {
			border-#{$bottom}: none;
			margin-#{$bottom}: -1px;
		}
		.mm-navbar--tabs:#{$first}-child .mm-navbar__tab--selected {
			border-#{$top}: none;
		}
	}
}

//	Position right
@mixin mm_position_right(
    $cls: '',
    $width: $mm_menuWidth,
    $minWidth: $mm_menuMinWidth,
    $maxWidth: $mm_menuMaxWidth
) {
    .mm-wrapper--opening {
        #{$cls}.mm-menu--position-right.mm-menu--opened ~ .mm-slideout {
            transform: translate3d(
                clamp(-$maxWidth, #{-$width * 100}vw, -$minWidth),
                0,
                0
            );
        }
    }
}

//	Position top
@mixin mm_position_top(
    $cls: '',
    $height: $mm_menuHeight,
    $minHeight: $mm_menuMinHeight,
    $maxHeight: $mm_menuMaxHeight
) {
    #{$cls}.mm-menu--position-top {
        height: clamp($minHeight, #{$height * 100}vh, $maxHeight);
    }
}

//	Position bottom
@mixin mm_position_bottom(
    $cls: '',
    $height: $mm_menuHeight,
    $minHeight: $mm_menuMinHeight,
    $maxHeight: $mm_menuMaxHeight
) {
    #{$cls}.mm-menu--position-bottom {
        height: clamp($minHeight, #{$height * 100}vh, $maxHeight);
    }
}
